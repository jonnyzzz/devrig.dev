# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      bootstrap: ${{ steps.filter.outputs.bootstrap }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            bootstrap:
              - 'cli/bootstrap/**'

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      working-directory: cli
      run: ./build.sh

  test:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Test
        working-directory: cli
        run: go test -v $(go list ./... | grep -v '/bootstrap' | grep -v '/integration-test')

  bootstrap:
    runs-on: ubuntu-latest
    needs: [build, changes]
    if: needs.changes.outputs.bootstrap == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"

      - name: Pull Docker images
        run: |
          docker pull ubuntu:18.04
          docker pull ubuntu:22.04
          docker pull mcr.microsoft.com/dotnet/sdk:8.0

      - name: Run bootstrap tests
        working-directory: cli/bootstrap
        run: go test -v

  integration:
    runs-on: ubuntu-latest
    needs: [build, test, bootstrap]
    if: |
        always() && 
        needs.build.result == 'success' && 
        needs.test.result == 'success' && 
        (needs.bootstrap.result == 'success' || needs.bootstrap.result == 'skipped')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Integration Tests
      working-directory: cli/integration-test
      run: go test -v
